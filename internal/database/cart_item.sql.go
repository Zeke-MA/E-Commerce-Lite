// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_item.sql

package database

import (
	"context"
	"time"
)

const addItemToCart = `-- name: AddItemToCart :one
INSERT INTO cart_item (cart_id, product_id, quantity, price_per_unit, item_timeout)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, cart_id, product_id, quantity, price_per_unit, item_timeout, created_at, updated_at
`

type AddItemToCartParams struct {
	CartID       int32     `json:"cart_id"`
	ProductID    int32     `json:"product_id"`
	Quantity     int32     `json:"quantity"`
	PricePerUnit string    `json:"price_per_unit"`
	ItemTimeout  time.Time `json:"item_timeout"`
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, addItemToCart,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
		arg.PricePerUnit,
		arg.ItemTimeout,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.PricePerUnit,
		&i.ItemTimeout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const cartItemExists = `-- name: CartItemExists :one
SELECT cart_id, product_id, quantity, price_per_unit FROM cart_item
WHERE cart_id = $1
AND product_id = $2
AND price_per_unit = $3
`

type CartItemExistsParams struct {
	CartID       int32  `json:"cart_id"`
	ProductID    int32  `json:"product_id"`
	PricePerUnit string `json:"price_per_unit"`
}

type CartItemExistsRow struct {
	CartID       int32  `json:"cart_id"`
	ProductID    int32  `json:"product_id"`
	Quantity     int32  `json:"quantity"`
	PricePerUnit string `json:"price_per_unit"`
}

func (q *Queries) CartItemExists(ctx context.Context, arg CartItemExistsParams) (CartItemExistsRow, error) {
	row := q.db.QueryRowContext(ctx, cartItemExists, arg.CartID, arg.ProductID, arg.PricePerUnit)
	var i CartItemExistsRow
	err := row.Scan(
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.PricePerUnit,
	)
	return i, err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE cart_item
SET quantity = quantity + $1, item_timeout = $2
WHERE cart_id = $3
AND product_id = $4
AND price_per_unit = $5
RETURNING id, cart_id, product_id, quantity, price_per_unit, item_timeout, created_at, updated_at
`

type UpdateCartItemQuantityParams struct {
	Quantity     int32     `json:"quantity"`
	ItemTimeout  time.Time `json:"item_timeout"`
	CartID       int32     `json:"cart_id"`
	ProductID    int32     `json:"product_id"`
	PricePerUnit string    `json:"price_per_unit"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartItemQuantity,
		arg.Quantity,
		arg.ItemTimeout,
		arg.CartID,
		arg.ProductID,
		arg.PricePerUnit,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.PricePerUnit,
		&i.ItemTimeout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
