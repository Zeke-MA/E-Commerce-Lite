// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkUsernameEmailUnique = `-- name: CheckUsernameEmailUnique :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE username = $1 OR email = $2
) AS exists
`

type CheckUsernameEmailUniqueParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CheckUsernameEmailUnique(ctx context.Context, arg CheckUsernameEmailUniqueParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameEmailUnique, arg.Username, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (id, username, hashed_password, created_at, updated_at, email)
VALUES (gen_random_uuid(), $1, $2, NOW(), NOW(), $3)
RETURNING id, username, hashed_password, created_at, updated_at, email, is_admin
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsAdmin,
	)
	return i, err
}

const isUserAdmin = `-- name: IsUserAdmin :one
SELECT Is_Admin
FROM users
WHERE id = $1 
AND username = $2
`

type IsUserAdminParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) IsUserAdmin(ctx context.Context, arg IsUserAdminParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserAdmin, arg.ID, arg.Username)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}
